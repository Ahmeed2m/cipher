{"version":3,"sources":["CipherMethods/Caeser/index.js","CipherMethods/Playfair/index.js","CipherMethods/Monoalphabetic/index.js","Data/EncryptionMethods.js","index.jsx"],"names":["Paragraph","Typography","Caeser","props","useState","key","setKey","cipher","setCipher","deCipher","setDeCipher","deCipherText","setDeCipherText","useEffect","plain","parseInt","newCipher","split","map","char","newChar","String","fromCharCode","charCodeAt","Cipher","text","toUpperCase","console","log","DeCipher","className","onChange","e","handleKeyChange","style","width","addonBefore","value","min","copyable","target","Playfair","Mono","encryptionMethods","alphabet","filter","newIndex","charAt","finalText","indexOf","s","Set","newKey","has","add","type","onClick","shuffledWord","word","length","splice","Math","random","genKey","Option","Select","rootElement","document","getElementById","ReactDOM","render","plainText","setPlainText","Object","keys","method","setMethod","placeholder","dropdownMatchSelectWidth","defaultValue","cipherMethod","Method"],"mappings":"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","file":"static/js/main.a4111f7b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './style.css'\r\nimport { Input, InputNumber, Typography } from \"antd\";\r\n\r\nconst { Paragraph } = Typography;\r\n\r\nfunction Caeser(props) {\r\n\tconst [key,setKey] = useState(0);\r\n\tconst [cipher,setCipher] = useState(\"\");\r\n\tconst [deCipher,setDeCipher] = useState(\"\");\r\n\tconst [deCipherText,setDeCipherText] = useState(\"\");\r\n\r\n\tfunction handleKeyChange(e){\r\n\t  setKey(e);\r\n\t}\r\n\tfunction Cipher(plain, key){\r\n\t  key = key?parseInt(key):0;\r\n\t  let newCipher = \"\";\r\n\t  plain.split('').map((char)=>{\r\n\t\tlet newChar = String.fromCharCode(((char.charCodeAt(0)-'A'.charCodeAt(0))+key)%26+'A'.charCodeAt(0));\r\n\t\tnewCipher+=newChar;\r\n\t  })\r\n\t  setCipher(newCipher);\r\n\t}\r\n\tfunction DeCipher(plain, key){\r\n\t  key = key?parseInt(key):0;\r\n\t  let newCipher = \"\";\r\n\t  plain.split('').map((char)=>{\r\n\t\tconsole.log((char.charCodeAt(0)-'A'.charCodeAt(0))-key + \" \" + char + \" \"+char.charCodeAt(0));\r\n\t\tlet newChar = String.fromCharCode(((char.charCodeAt(0)-'A'.charCodeAt(0))-key)%26+'A'.charCodeAt(0));\r\n\t\tnewCipher+=newChar;\r\n\t  })\r\n\t  setDeCipher(newCipher);\r\n\t}\r\n\tuseEffect(()=>{\r\n\t  Cipher(props.text.toUpperCase(),key);\r\n\t},[props.text, key])\r\n\r\n\tuseEffect(()=>{\r\n\t  DeCipher(deCipherText,key);\r\n\t},[deCipherText,key])\r\n\r\n\treturn (\r\n\t<div className=\"main\">\r\n\t  <h4>Caeser Things</h4>\r\n\t  <InputNumber\r\n\t\tonChange={e => handleKeyChange(e)}\r\n\t\tstyle={{ width: 360 }}\r\n\t\taddonBefore=\"Your Key\"\r\n\t\tvalue={key}\r\n\t\tmin={0}\r\n\t  />\r\n\t  <Paragraph copyable>{cipher}</Paragraph>\r\n\t  <h2>Decrypt?</h2>\r\n\t  <Input\r\n\t\tonChange={e =>{setDeCipherText(e.target.value)}}\r\n\t\tstyle={{ width: 360 }}\r\n\t\taddonBefore=\"Your Encrypted Text\"\r\n\t\tvalue={deCipherText}\r\n\t  />\r\n\t  <Paragraph copyable>{deCipher}</Paragraph>\r\n\t</div>\r\n\t);\r\n};\r\n\r\nexport default Caeser;","import React from \"react\";\r\n\r\nfunction Playfair() {\r\n  return (\r\n    <div>\r\n      <h4>Playfair Things</h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Playfair;\r\n","import React, { useState, useEffect } from 'react';\nimport './style.css'\nimport { Input, Button, Typography } from \"antd\";\n\nconst { Paragraph } = Typography;\n\nfunction Mono(props) {\n    const [key,setKey] = useState(props.alphabet);\n    const [cipher,setCipher] = useState(\"\");\n    const [deCipher,setDeCipher] = useState(\"\");\n    const [deCipherText,setDeCipherText] = useState(\"\");\n    function genKey(){\n      var shuffledWord = '';\n      let word = props.alphabet;\n      word = word.split('');\n      while (word.length > 0) {\n        shuffledWord +=  word.splice(word.length * Math.random() << 0, 1);\n      }\n      setKey(shuffledWord);\n    }\n    function handleKeyChange(e){\n      const s = new Set();\n      let newKey = \"\";\n      let text=e.target.value;\n      text.split('').filter(char=>{\n        char =char.toUpperCase();\n        // to only append letters\n        if(char>='A'&&char<='Z'){\n          if(!s.has(char)){\n            s.add(char);\n            newKey+=char;\n          }\n        }\n      });\n      setKey(newKey);\n    }\n    function Cipher(plain, key, alphabet){\n      let newCipher = \"\";\n      let newChar = \"\";\n      plain.split('').filter((char)=>{\n        let newIndex = char.charCodeAt(0)-'A'.charCodeAt(0);\n        if(key.charAt(newIndex)){\n          newChar = key.charAt(newIndex);\n        }else{\n          newChar = alphabet.charAt(newIndex);          \n        }\n        newCipher+=newChar;\n      })\n      setCipher(newCipher);\n    }\n    function DeCipher(plain, key, alphabet){\n      let finalText =\"\"\n      plain=plain.toUpperCase();\n      plain.split('').map((char)=>{\n        finalText+= alphabet.charAt(key.indexOf(char));\n      })\n      setDeCipher(finalText)\n    }\n    useEffect(()=>{\n      Cipher(props.text.toUpperCase(),key,props.alphabet);\n    },[props.text,props.alphabet, key])\n\n    useEffect(()=>{\n      DeCipher(deCipherText,key,props.alphabet);\n    },[deCipherText,key,props.alphabet])\n    return (\n    <div className=\"main\">\n      <h4>Monoalphabetic Things</h4>\n      <Input\n        onChange={e => handleKeyChange(e)}\n        style={{ width: 360 }}\n        addonBefore=\"Your Key\"\n        value={key}\n      />\n      <Button\n        type=\"dashed\"\n        onClick={()=>{genKey()}}\n        style={{ width: 200 }}\n      >Generate Random Key</Button>\n      <Paragraph copyable>{cipher}</Paragraph>\n      <h2>Decrypt?</h2>\n      <Input\n        onChange={e =>{setDeCipherText(e.target.value)}}\n        style={{ width: 360 }}\n        addonBefore=\"Your Encrypted Text\"\n        value={deCipherText}\n      />\n      <Paragraph copyable>{deCipher}</Paragraph>\n    </div>\n    );\n};\n\nexport default Mono;","import Caeser from \"../CipherMethods/Caeser\";\r\nimport Playfair from \"../CipherMethods/Playfair\";\r\nimport Monoalphabetic from \"../CipherMethods/Monoalphabetic\";\r\n\r\n\r\nconst encryptionMethods = {\r\n    \"Monoalphabetic\":Monoalphabetic,\r\n    \"Caeser\":Caeser,\r\n    \"Playfair\":Playfair,\r\n}\r\n\r\nexport default encryptionMethods;\r\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Input, Select } from \"antd\";\nimport encryptionMethods from \"./Data/EncryptionMethods\";\nimport \"./styles.css\";\n\nconst { Option } = Select;\n\nfunction App() {\n\tconst [plainText, setPlainText] = useState(\"\");\n\tconst [method, setMethod] = useState(Object.keys(encryptionMethods)[0]);\n\tconst alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tconst handleChange = (e) => {\n\t\tsetMethod(e);\n\t};\n\n\tfunction render(){\n\t\tconst Method = encryptionMethods[method];\n\t\treturn <Method text={plainText} alphabet={alphabet}/>;\n\t}\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Cipherciption</h1>\n\t\t\t<Input\n\t\t\t\tonChange={e => setPlainText(e.target.value)}\n\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\taddonBefore=\"Your Plain Text\"\n\t\t\t\tplaceholder=\"Text\"\n\t\t\t/>\n\t\t\t\n\t\t\t<Select style={{ width: 200 }} dropdownMatchSelectWidth={false} onChange={handleChange} defaultValue={Object.keys(encryptionMethods)[0]}>\n\t\t\t\t{Object.keys(encryptionMethods).map((cipherMethod)=>{\n\t\t\t\t\treturn(<Option key={cipherMethod} value={cipherMethod}>{cipherMethod} </Option>)\n\t\t\t\t})}\n\t\t\t</Select>\n\t\t\t\n\t\t\t<div className=\"method\">\n\t\t\t\t{render()}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}